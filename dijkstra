import networkx as nx
import matplotlib.pyplot as plt

G=nx.Graph()
c= int(input("enter edge number"))
source_ver = [1,1,1,2,2,2,3,3,3,4,4,5]
dest_ver = [2,3,4,3,4,5,4,5,6,5,6,6]
wts = [3,5,6,3,4,7,2,6,8,2,2,5]
weigh=[]
for i in range(0,c):
#   a=str(input("enter source vertex"))
#   b=str(input("enter destination vertex"))
#   d=int(input("enter weight"))
  a = source_ver[i]
  b = dest_ver[i]
  d = wts[i]
  G.add_edge(a,b,weight=d)
  source_ver.append(a)
  dest_ver.append(b)
  wts.append(d)
pos=nx.spring_layout(G)
nx.draw(G,pos,with_labels=True)
nx.draw_networkx_edge_labels(G,pos,edge_labels={(u, v): G[u][v]['weight'] for u, v in G.edges()})
plt.show()

shortest_path=nx.dijkstra_path(G,1,6)

pos2=nx.spring_layout(G)
nx.draw(G,pos,with_labels=True)
nx.draw_networkx_edge_labels(G,pos,edge_labels={(u,v): G[u][v]['weight'] for u,v in G.edges()})
nx.draw_networkx_edges(G, pos, edgelist=[(shortest_path[i], shortest_path[i + 1]) for i in range(len(shortest_path) - 1)], edge_color='r', width=2)
plt.show()
f=0
print(shortest_path)
j=0
for i in range(len(source_ver)):
    if j<len(shortest_path)-1:
        if source_ver[i]==shortest_path[j] and dest_ver[i]==shortest_path[j+1]:
            weigh.append(wts[i])
            print(source_ver[i],"-",dest_ver[i],":",wts[i])
            j+=1

print(sum(weigh))









import networkx as nx
import matplotlib.pyplot as plt
G = nx.Graph()

# Add edges to the graph
G.add_edge(0, 1, weight=6)
G.add_edge(0, 3, weight=6)
G.add_edge(0, 2, weight=8)
G.add_edge(1, 3, weight=5)
G.add_edge(1, 4, weight=10)
G.add_edge(2, 3, weight=7)
G.add_edge(2, 4, weight=5)
G.add_edge(2, 5, weight=3)
G.add_edge(4, 5,weight= 3)
pos = nx.spring_layout(G)
nx.draw(G, pos, node_color="blue",node_size=2000,with_labels=True)
nx.draw_networkx_edge_labels(G, pos, edge_labels={(u, v): G[u][v]['weight'] for u, v in G.edges()})

# Show the plot
plt.show()

n=nx.single_source_dijkstra(G,source=0,target=5)
print(n)
